//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: chatService.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Define the service containing methods here
///
/// Usage: instantiate `ChatService_ChatServiceRoutesClient`, then call methods of this protocol to make API calls.
public protocol ChatService_ChatServiceRoutesClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: ChatService_ChatServiceRoutesClientInterceptorFactoryProtocol? { get }

  func login(
    _ request: ChatService_AccountCredentials,
    callOptions: CallOptions?
  ) -> UnaryCall<ChatService_AccountCredentials, ChatService_OauthCredentials>

  func logout(
    _ request: ChatService_OauthCredentials,
    callOptions: CallOptions?
  ) -> UnaryCall<ChatService_OauthCredentials, ChatService_OauthCredentials>
}

extension ChatService_ChatServiceRoutesClientProtocol {
  public var serviceName: String {
    return "chatService.ChatServiceRoutes"
  }

  /// Basic function call, makes request and returns value
  ///
  /// - Parameters:
  ///   - request: Request to send to Login.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func login(
    _ request: ChatService_AccountCredentials,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ChatService_AccountCredentials, ChatService_OauthCredentials> {
    return self.makeUnaryCall(
      path: "/chatService.ChatServiceRoutes/Login",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoginInterceptors() ?? []
    )
  }

  /// Unary call to Logout
  ///
  /// - Parameters:
  ///   - request: Request to send to Logout.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func logout(
    _ request: ChatService_OauthCredentials,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ChatService_OauthCredentials, ChatService_OauthCredentials> {
    return self.makeUnaryCall(
      path: "/chatService.ChatServiceRoutes/Logout",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLogoutInterceptors() ?? []
    )
  }
}

public protocol ChatService_ChatServiceRoutesClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'login'.
  func makeLoginInterceptors() -> [ClientInterceptor<ChatService_AccountCredentials, ChatService_OauthCredentials>]

  /// - Returns: Interceptors to use when invoking 'logout'.
  func makeLogoutInterceptors() -> [ClientInterceptor<ChatService_OauthCredentials, ChatService_OauthCredentials>]
}

public final class ChatService_ChatServiceRoutesClient: ChatService_ChatServiceRoutesClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: ChatService_ChatServiceRoutesClientInterceptorFactoryProtocol?

  /// Creates a client for the chatService.ChatServiceRoutes service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: ChatService_ChatServiceRoutesClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Define the service containing methods here
///
/// To build a server, implement a class that conforms to this protocol.
public protocol ChatService_ChatServiceRoutesProvider: CallHandlerProvider {
  var interceptors: ChatService_ChatServiceRoutesServerInterceptorFactoryProtocol? { get }

  /// Basic function call, makes request and returns value
  func login(request: ChatService_AccountCredentials, context: StatusOnlyCallContext) -> EventLoopFuture<ChatService_OauthCredentials>

  func logout(request: ChatService_OauthCredentials, context: StatusOnlyCallContext) -> EventLoopFuture<ChatService_OauthCredentials>
}

extension ChatService_ChatServiceRoutesProvider {
  public var serviceName: Substring { return "chatService.ChatServiceRoutes" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Login":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ChatService_AccountCredentials>(),
        responseSerializer: ProtobufSerializer<ChatService_OauthCredentials>(),
        interceptors: self.interceptors?.makeLoginInterceptors() ?? [],
        userFunction: self.login(request:context:)
      )

    case "Logout":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ChatService_OauthCredentials>(),
        responseSerializer: ProtobufSerializer<ChatService_OauthCredentials>(),
        interceptors: self.interceptors?.makeLogoutInterceptors() ?? [],
        userFunction: self.logout(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol ChatService_ChatServiceRoutesServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'login'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLoginInterceptors() -> [ServerInterceptor<ChatService_AccountCredentials, ChatService_OauthCredentials>]

  /// - Returns: Interceptors to use when handling 'logout'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLogoutInterceptors() -> [ServerInterceptor<ChatService_OauthCredentials, ChatService_OauthCredentials>]
}
